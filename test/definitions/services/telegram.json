{
  "name": "telegram",
  "client": {
    "module": "octopus.lambda",
    "start": {
      "code": [
        "defmodule Telegram do",
          "@length_limit 10",

          "def test(%{\"x\" => x, \"y\" => y}) do",
             "numbers = [%{\"n\" => x}, %{\"n\" => y}]",
             "store = x + y",
             "%{\"numbers\" => numbers, \"store\" => store}",
          "end",

          "def split_to_words(%{\"string\" => string}) do",
            "events = Enum.map(String.split(String.trim(string)), fn(str) -> %{\"string\" => str} end)",
            "%{\"events\" => events}",
          "end",

          "def build_string(%{\"string\" => string, \"memo\" => string_before}) do",
            "string_after = String.trim(string_before <> \" \" <> string)",

            "cond do",
              "String.length(string_after) == @length_limit ->",
                "%{\"events\" => [string_after], \"memo\" => \"\"}",

              "String.length(string_after) > @length_limit ->",
                "%{\"events\" => [string_before], \"memo\" => string}",

              "true ->",
                "%{\"events\" => [], \"memo\" => string_after}",
            "end",
          "end",
        "end"
      ]
    }
  },
  "interface": {
    "test": {
      "input": {
        "x": {
          "type": "number"
        },
        "y": {
          "type": "number"
        }
      },
      "call": {
        "module": "Telegram",
        "function": "test"
      }
    },
    "decompose": {
      "input": {
        "string": {
          "type": "string"
        }
      },
      "call": {
        "module": "Telegram",
        "function": "split_to_words"
      }
    },
    "recompose": {
      "input": {
        "string": {
          "type": "string"
        },
        "memo": {
          "type": "string"
        }
      },
      "call": {
        "module": "Telegram",
        "function": "build_string"
      }
    }
  }
}
